# analyzers/malware/c2_detector.py

from collections import defaultdict

def detect_c2_communication(packets):
    """
    Detects C2 communication patterns in network traffic.
    """
    results = {
        'detected_c2_patterns': [],
    }

    # Group packets by source and destination IP
    flows = defaultdict(list)
    for packet in packets:
        if packet.haslayer('IP'):
            src_ip = packet['IP'].src
            dst_ip = packet['IP'].dst
            flows[(src_ip, dst_ip)].append(packet.time)

    # Analyze each flow for periodic beaconing
    for (src_ip, dst_ip), timestamps in flows.items():
        if len(timestamps) > 10:  # Only analyze flows with a minimum number of packets
            intervals = [timestamps[i] - timestamps[i-1] for i in range(1, len(timestamps))]
            avg_interval = sum(intervals) / len(intervals)

            # Check for consistent intervals (a simple heuristic for beaconing)
            variance = sum((x - avg_interval) ** 2 for x in intervals) / len(intervals)
            if variance < 1.0: # Arbitrary threshold for low variance
                results['detected_c2_patterns'].append({
                    'type': 'periodic_beaconing',
                    'source_ip': src_ip,
                    'destination_ip': dst_ip,
                    'packet_count': len(timestamps),
                    'average_interval': avg_interval,
                })

    return results
